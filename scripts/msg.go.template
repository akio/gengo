@##############################################################################
@# Template Context:
@# -----------------------------------------------
@# file_name_in : String
@#     Source file
@# spec : msggen.MsgSpec
@#     Parsed specification of the .msg file
@# md5sum : String
@#     MD5Sum of the .msg specification
@##############################################################################
@{
import genmsg.msgs
import gengo
}@
// Automatically generated from @file_name_in
package @(spec.package)

import (
    "bytes"
    "encoding/binary"
    "ros"
@{
for field in spec.parsed_fields():
    if not field.is_builtin:
        if field.is_header:
            print('"std_msgs"')
        else:
            package, name = genmsg.names.package_resource_name(field.base_type)
            package = package or spec.package
            print('"{0}"'.format(package))
}@
)

type _@(spec.short_name)Type struct {
    text string
    name string
    md5sum string
}

func (t *_@(spec.short_name)Type) Text() string {
    return t.text
}

func (t *_@(spec.short_name)Type) Name() string {
    return t.name
}

func (t *_@(spec.short_name)Type) MD5Sum() string {
    return t.md5sum
}

func (t *_@(spec.short_name)Type) NewMessage() ros.Message {
    return new(@(spec.short_name))
}

var (
    TypeOf@(spec.short_name) = &_@(spec.short_name)Type {
        `@(spec.text)`,
        "@(spec.full_name)",
        "@(md5sum)",
    }
)


type @(spec.short_name) struct {
@[for field in spec.parsed_fields()]@
    @(field.name.capitalize()) @(gengo.msg_type_to_go(field.type))
@[end for]@
}


func (m *@(spec.short_name)) Serialize(buf *bytes.Buffer) error {
    var err error = nil
@[for field in spec.parsed_fields()]@
@{    name = field.name.capitalize()}@
@[    if field.is_array]@
    binary.Write(buf, binary.LittleEndian, uint32(len([]byte(s.@(name)))))
    for i, f := range m.@(name) {
@[        if field.is_builtin]@
@[            if field.type == 'string']@
    binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.@(name)[i]))))
    buf.Write([]byte(m.@(name)[i]))
@[            elif field.type in ('time', 'duration')]@
    binary.Write(buf, binary.LittleEndian, m.@(name)[i].Sec)
    binary.Write(buf, binary.LittleEndian, m.@(name)[i].NSec)
@[            else]@
    binary.Write(buf, binary.LittleEndian, m.@(name)[i])
@[            end if]@
@[        else]@
    if err = m.@(name)[i].Serialize(buf); err != nil {
        return err
    }
@[        end if]@
    }
@[    else]@
@[        if field.is_builtin]@
@[            if field.type == 'string']@
    binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.@(name)))))
    buf.Write([]byte(m.@(name)))
@[            elif field.type in ('time', 'duration')]@
    binary.Write(buf, binary.LittleEndian, m.@(name).Sec)
    binary.Write(buf, binary.LittleEndian, m.@(name).NSec)
@[            else]@
    binary.Write(buf, binary.LittleEndian, m.@(name))
@[            end if]@
@[        else]@
    if err = m.@(name).Serialize(buf); err != nil {
        return err
    }
@[        end if]@
@[    end if]@
@[end for]@
    return err
}


func (m *@(spec.short_name)) Deserialize(buf *bytes.Reader) error {
    var err error = nil
@[for field in spec.parsed_fields()]@
@{    name = field.name.capitalize()}@
@[    if field.is_array]@
@[    else]@
@[        if field.is_builtin]@
@[            if field.type == 'string']@
    {
        var size uint32
        if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
            return err
        }
        data := make([]byte, int(size))
        if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
            return err
        }
        m.@(name) = string(data)
    }
@[            elif field.type in ('time', 'duration')]@
    if err = binary.Read(buf, binary.LittleEndian, &m.@(name).Sec); err != nil {
        return err
    }
    if err = binary.Read(buf, binary.LittleEndian, &m.@(name).NSec); err != nil {
        return err
    }
@[            else]@
    if err = binary.Read(buf, binary.LittleEndian, &m.@(name)); err != nil {
        return err
    }
@[            end if]@
@[        else]@
    if err = m.@(name).Deserialize(buf); err != nil {
        return err
    }
@[        end if]@
@[    end if]@
@[end for]@
    return err
}
