@##############################################################################
@# Template Context:
@# -----------------------------------------------
@# file_name_in : String
@#     Source file
@# spec : msggen.MsgSpec
@#     Parsed specification of the .msg file
@# md5sum : String
@#     MD5Sum of the .msg specification
@##############################################################################
package @(spec.package)
// Automatically generated from @file_name_in
@{
import genmsg.msgs
import gengo

binary_required = False
for field in spec.parsed_fields():
    if field.is_builtin or field.is_array:
        binary_required = True
}@
import (
    "bytes"
@[if binary_required]@
    "encoding/binary"
@[end if]@
    "ros"
@{
import_packages = set()
for field in spec.parsed_fields():
    if not field.is_builtin:
        if field.is_header:
            package = "std_msgs"
        else:
            package, name = genmsg.names.package_resource_name(field.base_type)
            package = package or spec.package
        if package != spec.package:
            import_packages.add(package)
for package in import_packages:
    print('    "{0}"'.format(package))
}@
)


@[if len(spec.constants) > 0]@
const (
@[for const in spec.constants]@
@{    const_name = const.name.capitalize() }@
@[    if const.type == 'string']@
    @(spec.short_name)@(const_name) @(gengo.msg_type_to_go(spec.package,  const.type)) = "@(const.val)"
@[    else]@
    @(spec.short_name)@(const_name) @(gengo.msg_type_to_go(spec.package,  const.type)) = @(const.val)
@[    end if]@
@[end for]@
)
@[end if]@


type _Msg@(spec.short_name) struct {
    text string
    name string
    md5sum string
}

func (t *_Msg@(spec.short_name)) Text() string {
    return t.text
}

func (t *_Msg@(spec.short_name)) Name() string {
    return t.name
}

func (t *_Msg@(spec.short_name)) MD5Sum() string {
    return t.md5sum
}

func (t *_Msg@(spec.short_name)) NewMessage() ros.Message {
    m := new(@(spec.short_name))
@[for field in spec.parsed_fields()]@
@{    name = gengo.field_name_to_go(field.name) }@
@[    if field.is_array]@
@[        if field.array_len is None]@
    m.@(name) = nil
@[        else]@
    for i := 0; i < @(field.array_len); i++ {
        m.@(name)[i] = @(gengo.msg_type_to_go_zero_value(spec.package, field.base_type))
    }
@[        end if]@
@[    else]@
    m.@(name) = @(gengo.msg_type_to_go_zero_value(spec.package, field.base_type))
@[    end if]@
@[end for]@
    return m
}

var (
    Msg@(spec.short_name) = &_Msg@(spec.short_name) {
        `@(spec.text)`,
        "@(spec.full_name)",
        "@(md5sum)",
    }
)


type @(spec.short_name) struct {
@[for field in spec.parsed_fields()]@
    @(gengo.field_name_to_go(field.name)) @(gengo.msg_type_to_go(spec.package, field.type))
@[end for]@
}


func (m *@(spec.short_name)) Serialize(buf *bytes.Buffer) error {
    var err error = nil
@[for field in spec.parsed_fields()]@
@{ name = gengo.field_name_to_go(field.name) }@
@[    if field.is_array]@
    binary.Write(buf, binary.LittleEndian, uint32(len(m.@(name))))
    for _, e := range m.@(name) {
@[        if field.is_builtin]@
@[            if field.base_type == 'string']@
        binary.Write(buf, binary.LittleEndian, uint32(len([]byte(e))))
        buf.Write([]byte(e))
@[            elif field.base_type in ('time', 'duration')]@
        binary.Write(buf, binary.LittleEndian, e.Sec)
        binary.Write(buf, binary.LittleEndian, e.NSec)
@[            else]@
        binary.Write(buf, binary.LittleEndian, e)
@[            end if]@
@[        else]@
        if err = e.Serialize(buf); err != nil {
            return err
        }
@[        end if]@
    }
@[    else]@
@[        if field.is_builtin]@
@[            if field.base_type == 'string']@
    binary.Write(buf, binary.LittleEndian, uint32(len([]byte(m.@(name)))))
    buf.Write([]byte(m.@(name)))
@[            elif field.base_type in ('time', 'duration')]@
    binary.Write(buf, binary.LittleEndian, m.@(name).Sec)
    binary.Write(buf, binary.LittleEndian, m.@(name).NSec)
@[            else]@
    binary.Write(buf, binary.LittleEndian, m.@(name))
@[            end if]@
@[        else]@
    if err = m.@(name).Serialize(buf); err != nil {
        return err
    }
@[        end if]@
@[    end if]@
@[end for]@
    return err
}


func (m *@(spec.short_name)) Deserialize(buf *bytes.Reader) error {
    var err error = nil
@[for field in spec.parsed_fields()]@
@{ name = gengo.field_name_to_go(field.name) }@
@[    if field.is_array]@
    {
        var size uint32
        if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
            return err
        }
@[        if field.array_len is None]@
        m.@(name) = make([]@(gengo.msg_type_to_go(spec.package, field.base_type)), int(size))
@[        end if]@
        for i := 0; i < int(size); i++ {
@[          if field.is_builtin]@
@[              if field.base_type == 'string']@
            {
                var size uint32
                if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
                    return err
                }
                data := make([]byte, int(size))
                if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
                    return err
                }
                m.@(name)[i] = string(data)
            }
@[              elif field.base_type in ('time', 'duration')]@
            {
                if err = binary.Read(buf, binary.LittleEndian, &m.@(name)[i].Sec); err != nil {
                    return err
                }
                

                if err = binary.Read(buf, binary.LittleEndian, &m.@(name)[i].NSec); err != nil {
                    return err
                }
            }
@[              else]@
            if err = binary.Read(buf, binary.LittleEndian, &m.@(name)[i]); err != nil {
                return err
            }
@[              end if]@
@[          else]@
            if err = m.@(name)[i].Deserialize(buf); err != nil {
                return err
            }
@[          end if]@
        }
    }
@[    else]@
@[        if field.is_builtin]@
@[            if field.base_type == 'string']@
    {
        var size uint32
        if err = binary.Read(buf, binary.LittleEndian, &size); err != nil {
            return err
        }
        data := make([]byte, int(size))
        if err = binary.Read(buf, binary.LittleEndian, data); err != nil {
            return err
        }
        m.@(name) = string(data)
    }
@[            elif field.base_type in ('time', 'duration')]@
    {
        if err = binary.Read(buf, binary.LittleEndian, &m.@(name).Sec); err != nil {
            return err
        }

        if err = binary.Read(buf, binary.LittleEndian, &m.@(name).NSec); err != nil {
            return err
        }
    }
@[            else]@
    if err = binary.Read(buf, binary.LittleEndian, &m.@(name)); err != nil {
        return err
    }
@[            end if]@
@[        else]@
    if err = m.@(name).Deserialize(buf); err != nil {
        return err
    }
@[        end if]@
@[    end if]@
@[end for]@
    return err
}
